@page "/login"
@layout LoginLayout;

@using SecureProject.Client.Auth
@using SecureProject.Shared.DTO
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject CustomAuthenticationStateProvider AuthProvider

<div class="card shadow-lg border-0 rounded-lg mt-3">
    <div class="card-header">
        <h3 class="text-center font-weight-light my-4">Login</h3>
    </div>
    <div class="card-body">
        <StatusMessage Message="@ErrorMessage" />
    <EditForm Model="loginModel" method="post" OnValidSubmit="HandleLogin" >
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="loginModel.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => loginModel.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="loginModel.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => loginModel.Password" class="text-danger" />
            </div>
        
            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary">Log in</button>
            </div>
        </EditForm>
    </div>
    <div class="card-footer text-center py-3">
        <div class="small">
            <a href="/Register">Need an account? Sign up!</a>
        </div>
    </div>
</div>



@code {
    private LoginDTO loginModel = new();
    private string ErrorMessage;


    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponseDTO>();
                var token = result?.Token;

                if (!string.IsNullOrWhiteSpace(token))
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                    AuthProvider.MarkUserAsAuthenticated(token);
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                ErrorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Login failed. " + ex.Message;
        }
    }
}
